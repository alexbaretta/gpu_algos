// Copyright (c) 2025 Alessandro Baretta
// All rights reserved.

// source path: include/hip/kernels/matrix/matrix_product_rocblas.hpp

#pragma once
#include <hip/hip_runtime.h>
#include <rocblas/rocblas.h>
#include <cxxopts.hpp>
#include <iostream>
#include <Eigen/Dense>
#include <hip/hip_fp16.h>

#include "hip/kernel_api/matrix_2in_1out.hiph"
#include "hip/type_traits.hiph"

struct Matrix_product_rocblas_spec {
    const std::string type_;

    const long m_;    // Rows of first matrix
    const long n_;    // Columns of first matrix and rows of second matrix
    const long k_;    // Columns of second matrix

    const long n_rows_A_;
    const long n_cols_A_;

    const long n_rows_B_;
    const long n_cols_B_;

    const long n_rows_C_;
    const long n_cols_C_;

    const long n_rows_temp_;
    const long n_cols_temp_;

    // Note: block_dim and grid_dim are not used with rocBLAS but kept for compatibility
    const dim3 block_dim_;
    const dim3 grid_dim_;
    const size_t dynamic_shared_mem_words_ = 0;

    constexpr static int DEFAULT_M = 3000; // Rows of first matrix
    constexpr static int DEFAULT_N = 300;  // Columns of first matrix / Rows of second matrix
    constexpr static int DEFAULT_K = 1000; // Columns of second matrix
    constexpr static int DEFAULT_BLOCK_DIM_X = 16;
    constexpr static int DEFAULT_BLOCK_DIM_Y = 16;

    inline static void add_kernel_spec_options(cxxopts::Options& options) {
        options.add_options()
            ("M", "Number of rows in first matrix", cxxopts::value<long>()->default_value(std::to_string(DEFAULT_M)))
            ("N", "Number of columns in first matrix and rows of the second matrix", cxxopts::value<long>()->default_value(std::to_string(DEFAULT_N)))
            ("K", "Number of columns in the second matrix", cxxopts::value<long>()->default_value(std::to_string(DEFAULT_K)))
            ("block-dim-x,x", "Number of threads in the x dimension per block", cxxopts::value<long>()->default_value(std::to_string(DEFAULT_BLOCK_DIM_X)))
            ("block-dim-y,y", "Number of threads in the y dimension per block", cxxopts::value<long>()->default_value(std::to_string(DEFAULT_BLOCK_DIM_Y)))
            ("type", "Numeric type (half, single/float, double, int<n>, uint<n>)", cxxopts::value<std::string>()->default_value("float"));
        ;
    }

    inline static Matrix_product_rocblas_spec make(
        const cxxopts::ParseResult& options_parsed
    ) {
        // Validate the type option
        const auto& type = options_parsed["type"].as<std::string>();
        if (type != "half" && type != "single" && type != "float" && type != "double" && type != "int8" && type != "int16" && type != "int32" && type != "int64" && type != "uint8" && type != "uint16" && type != "uint32" && type != "uint64") {
            std::cerr << "[ERROR] --type must be one of: half, single/float, double, int<n>, uint<n>" << std::endl;
            throw cxxopts::exceptions::exception("Invalid --type: " + type);
        }
        return Matrix_product_rocblas_spec(
            type,
            options_parsed["m"].as<long>(),
            options_parsed["n"].as<long>(),
            options_parsed["k"].as<long>(),
            options_parsed["block-dim-x"].as<long>(),
            options_parsed["block-dim-y"].as<long>()
        );
    }

    inline Matrix_product_rocblas_spec(
        const std::string& type,
        const long m,
        const long n,
        const long k,
        const long block_dim_x,
        const long block_dim_y
    ) : type_(type),
        m_(m),
        n_(n),
        k_(k),
        n_rows_A_(m),
        n_cols_A_(n),
        n_rows_B_(n),
        n_cols_B_(k),
        n_rows_C_(m),
        n_cols_C_(k),
        n_rows_temp_(0),
        n_cols_temp_(0),
        block_dim_(block_dim_x, block_dim_y),
        grid_dim_(
            (k_ + block_dim_.x - 1) / block_dim_.x,
            (m_ + block_dim_.y - 1) / block_dim_.y
        )
    {}
};

static_assert(Check_matrix_kernel_spec_2In_1Out<Matrix_product_rocblas_spec>::check_passed, "Matrix_product_rocblas_spec is not a valid kernel spec");


template <HIP_scalar Number_>
class Matrix_product_rocblas_kernel {
    public:
    using Number = Number_;
    using Kernel_spec = Matrix_product_rocblas_spec;

    const Kernel_spec spec_;
    rocblas_handle rocblas_handle_;

    Matrix_product_rocblas_kernel(
        const Kernel_spec spec
    ) : spec_(spec) {
        // Initialize rocBLAS handle
        rocblas_create_handle(&rocblas_handle_);

        // Note: AMD rocBLAS doesn't have separate math modes like NVIDIA
    }

    ~Matrix_product_rocblas_kernel() {
        if (rocblas_handle_) {
            rocblas_destroy_handle(rocblas_handle_);
        }
    }

    void run_device_kernel(
        const Number* const gpu_data_A,
        const Number* const gpu_data_B,
        Number* const gpu_data_C,
        Number* const gpu_data_temp,
        hipStream_t stream
    ) {
        // Set the stream for rocBLAS operations
        rocblas_set_stream(rocblas_handle_, stream);

        const Number alpha = static_cast<Number>(1.0);
        const Number beta = static_cast<Number>(0.0);

        if constexpr (std::is_same_v<Number, __half>) {
            // Use standard rocBLAS for half precision
            rocblas_hgemm(rocblas_handle_,
                       rocblas_operation_none, rocblas_operation_none,
                       spec_.k_, spec_.m_, spec_.n_,
                       &alpha,
                       gpu_data_B, spec_.k_,
                       gpu_data_A, spec_.n_,
                       &beta,
                       gpu_data_C, spec_.k_);
        } else if constexpr (std::is_same_v<Number, float>) {
            // Use standard rocBLAS for single precision
            rocblas_sgemm(rocblas_handle_,
                       rocblas_operation_none, rocblas_operation_none,
                       spec_.k_, spec_.m_, spec_.n_,
                       &alpha,
                       gpu_data_B, spec_.k_,
                       gpu_data_A, spec_.n_,
                       &beta,
                       gpu_data_C, spec_.k_);
        } else if constexpr (std::is_same_v<Number, double>) {
            // Use standard rocBLAS for double precision
            rocblas_dgemm(rocblas_handle_,
                       rocblas_operation_none, rocblas_operation_none,
                       spec_.k_, spec_.m_, spec_.n_,
                       &alpha,
                       gpu_data_B, spec_.k_,
                       gpu_data_A, spec_.n_,
                       &beta,
                       gpu_data_C, spec_.k_);
        }
    }
    Eigen::Matrix<Number, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor> run_host_kernel(
        const Eigen::Map<Eigen::Matrix<Number, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>>& A,
        const Eigen::Map<Eigen::Matrix<Number, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor>>& B
    ) {
        return (A * B).eval();
    }

};
static_assert(Check_matrix_kernel_2In_1Out_template<Matrix_product_rocblas_kernel>::check_passed, "Matrix_product_rocblas is not a valid kernel template");
